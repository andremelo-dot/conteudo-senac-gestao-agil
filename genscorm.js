import fs from 'fs';
import { archiveFolder } from 'zip-lib';

/*
Author: André Melo
Nota: Esta é uma implementação baseada no script feito por Gabriel Medeiros
*/

export default function genScorm({
  root = './',
  xmlEnconding = 'UTF-8',
  htmlFilenamePattern = 'index',
  havePrerequisites = false,
  organizationTitle = 'Organization',
}) {
  
  var htmlFileNameRegex = /index/i;
  // Padrão buscado dentro dos arquivos HTML que irão conter o
  // título de cada SCO no manifesto.
  var tagAttrPattern = 'data-sco-title="(.+?)"'
  var tagAttrRegex = new RegExp(tagAttrPattern)// /data-sco-title="(.+?)"/i;
  // Procurar ou não por subpastas.
  const userInputArgs = process.argv;
  var orgRef = `ORG-${generatorKey(32)}`;
  var itemIdentifier = () => `ITEM-${generatorKey(32)}`;
  var resIdentifier = () => `RES-${generatorKey(32)}`;
  var x = new Date;
  var m = x.getUTCMonth() + 1;
  var dateNow = `${x.getUTCDate()}/${m}/${x.getUTCFullYear()}`;
  var fileEncoding = xmlEnconding.toLowerCase() == 'windows-1252' ? 'latin1' : 'utf8';
  var scoRefObj = {};

  const options = {
    '-h,--help': (() => {
      console.info(helpMessage)
      process.exit();
    }),
    '-pr,--pre-requirement': (() => {
      havePrerequisites = true;
    }),
    '-p,--pattern': ((flagInput) => {
      if (!flagInput) notInputMessage();
      htmlFilenamePattern = flagInput;
    }),
    '-t, --tag-pattern': ((flagInput) => {
      tagAttrRegex = new RegExp(flagInput, "i");
    }),
  }

  console.log("\x1b[33mInicializando genScorm... \x1b[0m");
  
  /*====================================
  NÃO ALTERAR !!!
  ==================================== */

  const e = `<?xml version="1.0" encoding="${xmlEnconding}"?>\n   \x3c!-- filename=adlcp_rootv1p2.xsd --\x3e\n   \x3c!-- Conforms to w3c http://www.w3.org/TR/xmlschema-1/ 2000-10-24--\x3e\n\n   <xsd:schema xmlns="http://www.adlnet.org/xsd/adlcp_rootv1p2"\n               targetNamespace="http://www.adlnet.org/xsd/adlcp_rootv1p2"\n               xmlns:xml="http://www.w3.org/XML/1998/namespace"\n               xmlns:imscp="http://www.imsproject.org/xsd/imscp_rootv1p1p2"\n               xmlns:xsd="http://www.w3.org/2001/XMLSchema"\n               elementFormDefault="unqualified"\n               version="ADL Version 1.2">\n\n         <xsd:import namespace="http://www.imsproject.org/xsd/imscp_rootv1p1p2" schemaLocation="imscp_rootv1p1p2.xsd"/>\n\n         <xsd:element name="location" type="locationType"/>\n         <xsd:element name="prerequisites" type="prerequisitesType"/>\n         <xsd:element name="maxtimeallowed" type="maxtimeallowedType"/>\n         <xsd:element name="timelimitaction" type="timelimitactionType"/>\n         <xsd:element name="datafromlms" type="datafromlmsType"/>\n         <xsd:element name="masteryscore" type="masteryscoreType"/>\n\n\n         <xsd:element name="schema" type="newSchemaType"/>\n         <xsd:simpleType name="newSchemaType">\n                  <xsd:restriction base="imscp:schemaType">\n                           <xsd:enumeration value="ADL SCORM"/>\n                  </xsd:restriction>\n         </xsd:simpleType>\n\n         <xsd:element name="schemaversion" type="newSchemaversionType"/>\n         <xsd:simpleType name="newSchemaversionType">\n                  <xsd:restriction base="imscp:schemaversionType">\n                           <xsd:enumeration value="1.2"/>\n                  </xsd:restriction>\n         </xsd:simpleType>\n\n\n         <xsd:attribute name="scormtype">\n               <xsd:simpleType>\n                  <xsd:restriction base="xsd:string">\n                     <xsd:enumeration value="asset"/>\n                     <xsd:enumeration value="sco"/>\n                  </xsd:restriction>\n               </xsd:simpleType>\n         </xsd:attribute>\n\n         <xsd:simpleType name="locationType">\n                  <xsd:restriction base="xsd:string">\n                           <xsd:maxLength value="2000"/>\n                  </xsd:restriction>\n         </xsd:simpleType>\n\n\n         <xsd:complexType name="prerequisitesType">\n            <xsd:simpleContent>\n               <xsd:extension base="prerequisiteStringType">\n                     <xsd:attributeGroup ref="attr.prerequisitetype"/>\n               </xsd:extension>\n            </xsd:simpleContent>\n         </xsd:complexType>\n\n         <xsd:attributeGroup name="attr.prerequisitetype">\n                  <xsd:attribute name="type" use="required">\n                           <xsd:simpleType>\n                                 <xsd:restriction base="xsd:string">\n                                    <xsd:enumeration value="aicc_script"/>\n                                 </xsd:restriction>\n                           </xsd:simpleType>\n                  </xsd:attribute>\n         </xsd:attributeGroup>\n\n         <xsd:simpleType name="maxtimeallowedType">\n                  <xsd:restriction base="xsd:string">\n                           <xsd:maxLength value="13"/>\n                  </xsd:restriction>\n         </xsd:simpleType>\n\n         <xsd:simpleType name="timelimitactionType">\n                  <xsd:restriction base="stringType">\n                           <xsd:enumeration value="exit,no message"/>\n                           <xsd:enumeration value="exit,message"/>\n                           <xsd:enumeration value="continue,no message"/>\n                           <xsd:enumeration value="continue,message"/>\n                  </xsd:restriction>\n         </xsd:simpleType>\n\n         <xsd:simpleType name="datafromlmsType">\n                  <xsd:restriction base="xsd:string">\n                           <xsd:maxLength value="255"/>\n                  </xsd:restriction>\n         </xsd:simpleType>\n\n         <xsd:simpleType name="masteryscoreType">\n                  <xsd:restriction base="xsd:string">\n                           <xsd:maxLength value="200"/>\n                  </xsd:restriction>\n         </xsd:simpleType>\n\n         <xsd:simpleType name="stringType">\n                  <xsd:restriction base="xsd:string"/>\n         </xsd:simpleType>\n         \n         <xsd:simpleType name="prerequisiteStringType">\n                  <xsd:restriction base="xsd:string">\n                     <xsd:maxLength value="200"/>\n                  </xsd:restriction>\n         </xsd:simpleType>\n\n   </xsd:schema>\n   `;

  const n = `<?xml version="1.0" encoding="${xmlEnconding}"?>\n   \x3c!-- filename=ims_xml.xsd --\x3e\n   <xsd:schema targetNamespace="http://www.w3.org/XML/1998/namespace" xmlns="http://www.w3.org/XML/1998/namespace" xmlns:xsd="http://www.w3.org/2001/XMLSchema" elementFormDefault="unqualified">\n      \x3c!-- 2001-02-22 edited by Thomas Wason IMS Global Learning Consortium, Inc. --\x3e\n      <xsd:annotation>\n         <xsd:documentation>In namespace-aware XML processors, the &quot;xml&quot; prefix is bound to the namespace name http://www.w3.org/XML/1998/namespace.</xsd:documentation>\n         <xsd:documentation>Do not reference this file in XML instances</xsd:documentation>\n      </xsd:annotation>\n      <xsd:attribute name="lang" type="xsd:language">\n         <xsd:annotation>\n            <xsd:documentation>Refers to universal  XML 1.0 lang attribute</xsd:documentation>\n         </xsd:annotation>\n      </xsd:attribute>\n      <xsd:attribute name="base" type="xsd:anyURI">\n         <xsd:annotation>\n            <xsd:documentation>Refers to XML Base: http://www.w3.org/TR/xmlbase</xsd:documentation>\n         </xsd:annotation>\n      </xsd:attribute>\n      <xsd:attribute name="link" type="xsd:anyURI"/>\n   </xsd:schema>\n   `;

  const t = `<?xml version="1.0" encoding="${xmlEnconding}"?>\n\n   \x3c!-- edited with XML Spy v3.5 (http://www.xmlspy.com) by Thomas Wason (private) --\x3e\n   \x3c!-- filename=ims_cp_rootv1p1p2.xsd --\x3e\n   \x3c!-- Copyright (2) 2001 IMS Global Learning Consortium, Inc. --\x3e\n   \x3c!-- edited by Thomas Wason  --\x3e\n   \x3c!-- Conforms to w3c http://www.w3.org/TR/xmlschema-1/ 2000-10-24--\x3e\n\n   <xsd:schema xmlns="http://www.imsproject.org/xsd/imscp_rootv1p1p2" \n               targetNamespace="http://www.imsproject.org/xsd/imscp_rootv1p1p2" \n               xmlns:xml="http://www.w3.org/XML/1998/namespace" \n               xmlns:xsd="http://www.w3.org/2001/XMLSchema" \n               elementFormDefault="unqualified" version="IMS CP 1.1.2">\n\n      \x3c!-- ******************** --\x3e\n      \x3c!-- ** Change History ** --\x3e\n      \x3c!-- ******************** --\x3e\n      <xsd:annotation>\n         <xsd:documentation xml:lang="en">DRAFT XSD for IMS Content Packaging version 1.1 DRAFT</xsd:documentation>\n         <xsd:documentation> Copyright (c) 2001 IMS GLC, Inc. </xsd:documentation>\n         <xsd:documentation>2000-04-21, Adjustments by T.D. Wason from CP 1.0.</xsd:documentation>\n         <xsd:documentation>2001-02-22, T.D.Wason: Modify for 2000-10-24 XML-Schema version.  Modified to support extension.</xsd:documentation>\n         <xsd:documentation>2001-03-12, T.D.Wason: Change filename, target and meta-data namespaces and meta-data fielname.  Add meta-data to itemType, fileType and organizationType.</xsd:documentation>\n         <xsd:documentation>Do not define namespaces for xml in XML instances generated from this xsd.</xsd:documentation>\n         <xsd:documentation>Imports IMS meta-data xsd, lower case element names.         </xsd:documentation>\n         <xsd:documentation>This XSD provides a reference to the IMS meta-data root element as imsmd:record</xsd:documentation>\n         <xsd:documentation>If the IMS meta-data is to be used in the XML instance then the instance must define an IMS meta-data prefix with a namespace.  The meta-data targetNamespace should be used.  </xsd:documentation>\n         <xsd:documentation>2001-03-20, Thor Anderson: Remove manifestref, change resourceref back to identifierref, change manifest back to contained by manifest. --Tom Wason: manifest may contain _none_ or more manifests.</xsd:documentation>\n         <xsd:documentation>2001-04-13 Tom Wason: corrected attirbute name structure.  Was misnamed type.  </xsd:documentation>\n         <xsd:documentation>2001-05-14 Schawn Thropp: Made all complexType extensible with the group.any</xsd:documentation>\n         <xsd:documentation>Added the anyAttribute to all complexTypes. Changed the href attribute on the fileType and resourceType to xsd:string</xsd:documentation>\n         <xsd:documentation>Changed the maxLength of the href, identifierref, parameters, structure attributes to match the Information model.</xsd:documentation>\n         <xsd:documentation>2001-07-25 Schawn Thropp: Changed the namespace for the Schema of Schemas to the 5/2/2001 W3C XML Schema</xsd:documentation> \n         <xsd:documentation>Recommendation. attributeGroup attr.imsmd deleted, was not used anywhere.  Any attribute declarations that have</xsd:documentation>\n         <xsd:documentation>use = "default" changed to use="optional" - attr.structure.req.</xsd:documentation>\n         <xsd:documentation>Any attribute declarations that have value="somevalue" changed to default="somevalue",</xsd:documentation>\n         <xsd:documentation>attr.structure.req (hierarchical).  Removed references to IMS MD Version 1.1.</xsd:documentation>\n         <xsd:documentation>Modified attribute group "attr.resourcetype.req" to change use from optional</xsd:documentation>\n         <xsd:documentation>to required to match the information model.  As a result the default value also needed to be removed</xsd:documentation> \n         <xsd:documentation>Name change for XSD.  Changed to match version of CP Spec                                           </xsd:documentation> \n      </xsd:annotation>\n\n      <xsd:annotation>\n         <xsd:documentation>Inclusions and Imports</xsd:documentation>\n      </xsd:annotation>\n\n      <xsd:import namespace="http://www.w3.org/XML/1998/namespace" schemaLocation="ims_xml.xsd"/>\n\n      <xsd:annotation>\n         <xsd:documentation>Attribute Declarations</xsd:documentation>\n      </xsd:annotation>\n\n      \x3c!-- **************************** --\x3e\n      \x3c!-- ** Attribute Declarations ** --\x3e\n      \x3c!-- **************************** --\x3e\n      <xsd:attributeGroup name="attr.base">\n         <xsd:attribute ref="xml:base" use="optional"/>\n      </xsd:attributeGroup>\n\n      <xsd:attributeGroup name="attr.default">\n         <xsd:attribute name="default" type="xsd:IDREF" use="optional"/>\n      </xsd:attributeGroup>\n\n      <xsd:attributeGroup name="attr.href">\n         <xsd:attribute name="href" use="optional">\n            <xsd:simpleType>\n               <xsd:restriction base="xsd:anyURI">\n                  <xsd:maxLength value="2000"/>\n               </xsd:restriction>\n            </xsd:simpleType>\n         </xsd:attribute>\n      </xsd:attributeGroup>\n\n      <xsd:attributeGroup name="attr.href.req">\n         <xsd:attribute name="href" use="required">\n            <xsd:simpleType>\n               <xsd:restriction base="xsd:anyURI">\n                  <xsd:maxLength value="2000"/>\n               </xsd:restriction>\n            </xsd:simpleType>\n         </xsd:attribute>\n      </xsd:attributeGroup> \n\n      <xsd:attributeGroup name="attr.identifier.req">\n         <xsd:attribute name="identifier" type="xsd:ID" use="required"/>\n      </xsd:attributeGroup>\n\n      <xsd:attributeGroup name="attr.identifier">\n         <xsd:attribute name="identifier" type="xsd:ID" use="optional"/>\n      </xsd:attributeGroup>\n\n      <xsd:attributeGroup name="attr.isvisible">\n         <xsd:attribute name="isvisible" type="xsd:boolean" use="optional"/>\n      </xsd:attributeGroup>\n      \n      <xsd:attributeGroup name="attr.parameters">\n         <xsd:attribute name="parameters" use="optional">\n            <xsd:simpleType>\n               <xsd:restriction base="xsd:string">\n                  <xsd:maxLength value="1000"/>\n               </xsd:restriction>\n            </xsd:simpleType>\n         </xsd:attribute>\n      </xsd:attributeGroup>\n      \n      <xsd:attributeGroup name="attr.identifierref">\n         <xsd:attribute name="identifierref" use="optional">\n            <xsd:simpleType>\n               <xsd:restriction base="xsd:string">\n                  <xsd:maxLength value="2000"/>\n               </xsd:restriction>\n            </xsd:simpleType>\n         </xsd:attribute>\n      </xsd:attributeGroup>\n      \n      <xsd:attributeGroup name="attr.identifierref.req">\n         <xsd:attribute name="identifierref" use="required">\n            <xsd:simpleType>\n               <xsd:restriction base="xsd:string">\n                  <xsd:maxLength value="2000"/>\n               </xsd:restriction>\n            </xsd:simpleType>\n         </xsd:attribute>\n      </xsd:attributeGroup>\n                  \n      <xsd:attributeGroup name="attr.resourcetype.req">\n         <xsd:attribute name="type" use="required">\n            <xsd:simpleType>\n               <xsd:restriction base="xsd:string">\n                  <xsd:maxLength value="1000"/>\n               </xsd:restriction>\n            </xsd:simpleType>\n         </xsd:attribute>\n      </xsd:attributeGroup>\n\n      <xsd:attributeGroup name="attr.structure.req">\n         <xsd:attribute name="structure" use="optional" default="hierarchical">\n            <xsd:simpleType>\n               <xsd:restriction base="xsd:string">\n                  <xsd:maxLength value="200"/>\n               </xsd:restriction>\n            </xsd:simpleType>\n         </xsd:attribute>\n      </xsd:attributeGroup>\n\n      <xsd:attributeGroup name="attr.version">\n         <xsd:attribute name="version" use="optional">\n            <xsd:simpleType>\n               <xsd:restriction base="xsd:string">\n                  <xsd:maxLength value="20"/>\n               </xsd:restriction>\n            </xsd:simpleType>\n         </xsd:attribute>\n      </xsd:attributeGroup>\n\n      <xsd:annotation>\n         <xsd:documentation>element groups</xsd:documentation>\n      </xsd:annotation>\n\n      <xsd:group name="grp.any">\n         <xsd:annotation>\n            <xsd:documentation>Any namespaced element from any namespace may be included within an &quot;any&quot; element.  The namespace for the imported element must be defined in the instance, and the schema must be imported.  </xsd:documentation>\n         </xsd:annotation>\n         <xsd:sequence>\n            <xsd:any namespace="##other" processContents="strict" minOccurs="0" maxOccurs="unbounded"/>\n         </xsd:sequence>\n      </xsd:group>\n\n      \x3c!-- ************************** --\x3e\n      \x3c!-- ** Element Declarations ** --\x3e\n      \x3c!-- ************************** --\x3e\n\n      <xsd:element name="dependency" type="dependencyType"/>\n      <xsd:element name="file" type="fileType"/>\n      <xsd:element name="item" type="itemType"/>\n      <xsd:element name="manifest" type="manifestType"/>\n      <xsd:element name="metadata" type="metadataType"/>\n      <xsd:element name="organization" type="organizationType"/>\n      <xsd:element name="organizations" type="organizationsType"/>\n      <xsd:element name="resource" type="resourceType"/>\n      <xsd:element name="resources" type="resourcesType"/>\n      <xsd:element name="schema" type="schemaType"/>\n      <xsd:element name="schemaversion" type="schemaversionType"/>\n      <xsd:element name="title" type="titleType"/>\n\n      \x3c!-- ******************* --\x3e\n      \x3c!-- ** Complex Types ** --\x3e\n      \x3c!-- ******************* --\x3e\n\n      \x3c!-- **************** --\x3e\n      \x3c!-- ** dependency ** --\x3e\n      \x3c!-- **************** --\x3e\n      <xsd:complexType name="dependencyType">\n         <xsd:sequence>\n            <xsd:group ref="grp.any"/>\n         </xsd:sequence>\n         <xsd:attributeGroup ref="attr.identifierref.req"/>\n         <xsd:anyAttribute namespace="##other" processContents="strict"/>\n      </xsd:complexType>\n      \n      \x3c!-- ********** --\x3e\n      \x3c!-- ** file ** --\x3e\n      \x3c!-- ********** --\x3e\n      <xsd:complexType name="fileType">\n         <xsd:sequence>\n            <xsd:element ref="metadata" minOccurs="0"/>\n            <xsd:group ref="grp.any"/>\n         </xsd:sequence>\n         <xsd:attributeGroup ref="attr.href.req"/>\n         <xsd:anyAttribute namespace="##other" processContents="strict"/>\n      </xsd:complexType>\n      \n      \x3c!-- ********** --\x3e\n      \x3c!-- ** item ** --\x3e\n      \x3c!-- ********** --\x3e\n      <xsd:complexType name="itemType">\n         <xsd:sequence>\n            <xsd:element ref="title" minOccurs="0"/>\n            <xsd:element ref="item" minOccurs="0" maxOccurs="unbounded"/>\n            <xsd:element ref="metadata" minOccurs="0"/>\n            <xsd:group ref="grp.any"/>\n         </xsd:sequence>\n         <xsd:attributeGroup ref="attr.identifier.req"/>\n         <xsd:attributeGroup ref="attr.identifierref"/>\n         <xsd:attributeGroup ref="attr.isvisible"/>\n         <xsd:attributeGroup ref="attr.parameters"/>\n         <xsd:anyAttribute namespace="##other" processContents="strict"/>\n      </xsd:complexType>\n      \n      \x3c!-- ************** --\x3e\n      \x3c!-- ** manifest ** --\x3e\n      \x3c!-- ************** --\x3e\n      <xsd:complexType name="manifestType">\n         <xsd:sequence>\n            <xsd:element ref="metadata" minOccurs="0"/>\n            <xsd:element ref="organizations"/>\n            <xsd:element ref="resources"/>\n            <xsd:element ref="manifest" minOccurs="0" maxOccurs="unbounded"/>\n            <xsd:group ref="grp.any"/>\n         </xsd:sequence>\n         <xsd:attributeGroup ref="attr.identifier.req"/>\n         <xsd:attributeGroup ref="attr.version"/>\n         <xsd:attribute ref="xml:base"/>\n         <xsd:anyAttribute namespace="##other" processContents="strict"/>\n      </xsd:complexType>\n      \n      \x3c!-- ************** --\x3e\n      \x3c!-- ** metadata ** --\x3e\n      \x3c!-- ************** --\x3e\n      <xsd:complexType name="metadataType">\n         <xsd:sequence>\n            <xsd:element ref="schema" minOccurs="0"/>\n            <xsd:element ref="schemaversion" minOccurs="0"/>\n            <xsd:group ref="grp.any"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      \x3c!-- ******************* --\x3e\n      \x3c!-- ** organizations ** --\x3e\n      \x3c!-- ******************* --\x3e\n      <xsd:complexType name="organizationsType">\n         <xsd:sequence>\n            <xsd:element ref="organization" minOccurs="0" maxOccurs="unbounded"/>\n            <xsd:group ref="grp.any"/>\n         </xsd:sequence>\n         <xsd:attributeGroup ref="attr.default"/>\n         <xsd:anyAttribute namespace="##other" processContents="strict"/>\n      </xsd:complexType>\n      \n      \x3c!-- ****************** --\x3e\n      \x3c!-- ** organization ** --\x3e\n      \x3c!-- ****************** --\x3e\n      <xsd:complexType name="organizationType">\n         <xsd:sequence>\n            <xsd:element ref="title" minOccurs="0"/>\n            <xsd:element ref="item" minOccurs="0" maxOccurs="unbounded"/>\n            <xsd:element ref="metadata" minOccurs="0"/>\n            <xsd:group ref="grp.any"/>\n         </xsd:sequence>\n         <xsd:attributeGroup ref="attr.identifier.req"/>\n         <xsd:attributeGroup ref="attr.structure.req"/>\n         <xsd:anyAttribute namespace="##other" processContents="strict"/>\n      </xsd:complexType>\n      \n      \x3c!-- *************** --\x3e\n      \x3c!-- ** resources ** --\x3e\n      \x3c!-- *************** --\x3e\n      <xsd:complexType name="resourcesType">\n         <xsd:sequence>\n            <xsd:element ref="resource" minOccurs="0" maxOccurs="unbounded"/>\n            <xsd:group ref="grp.any"/>\n         </xsd:sequence>\n         <xsd:attributeGroup ref="attr.base"/>\n         <xsd:anyAttribute namespace="##other" processContents="strict"/>\n      </xsd:complexType>\n      \n      \x3c!-- ************** --\x3e\n      \x3c!-- ** resource ** --\x3e\n      \x3c!-- ************** --\x3e\n      <xsd:complexType name="resourceType">\n         <xsd:sequence>\n            <xsd:element ref="metadata" minOccurs="0"/>\n            <xsd:element ref="file" minOccurs="0" maxOccurs="unbounded"/>\n            <xsd:element ref="dependency" minOccurs="0" maxOccurs="unbounded"/>\n            <xsd:group ref="grp.any"/>\n         </xsd:sequence>\n         <xsd:attributeGroup ref="attr.identifier.req"/>\n         <xsd:attributeGroup ref="attr.resourcetype.req"/>\n         <xsd:attributeGroup ref="attr.base"/>\n         <xsd:attributeGroup ref="attr.href"/>\n         <xsd:anyAttribute namespace="##other" processContents="strict"/>\n      </xsd:complexType>\n\n      \x3c!-- ****************** --\x3e\n      \x3c!-- ** Simple Types ** --\x3e\n      \x3c!-- ****************** --\x3e\n\n      \x3c!-- ************ --\x3e\n      \x3c!-- ** schema ** --\x3e\n      \x3c!-- ************ --\x3e\n      <xsd:simpleType name="schemaType">\n         <xsd:restriction base="xsd:string">\n            <xsd:maxLength value="100"/>\n         </xsd:restriction>\n      </xsd:simpleType>\n      \n      \x3c!-- ******************* --\x3e\n      \x3c!-- ** schemaversion ** --\x3e\n      \x3c!-- ******************* --\x3e\n      <xsd:simpleType name="schemaversionType">\n         <xsd:restriction base="xsd:string">\n            <xsd:maxLength value="20"/>\n         </xsd:restriction>\n      </xsd:simpleType>\n      \n      \x3c!-- *********** --\x3e\n      \x3c!-- ** title ** --\x3e\n      \x3c!-- *********** --\x3e\n      <xsd:simpleType name="titleType">\n         <xsd:restriction base="xsd:string">\n            <xsd:maxLength value="200"/>\n         </xsd:restriction>\n      </xsd:simpleType>\n\n   </xsd:schema>\n   `;

  const s = `<?xml version="1.0" encoding="${xmlEnconding}"?>\n   \x3c!-- edited by Thomas Wason  --\x3e\n   <xsd:schema targetNamespace="http://www.imsglobal.org/xsd/imsmd_rootv1p2p1" \n               xmlns:xml="http://www.w3.org/XML/1998/namespace" \n               xmlns:xsd="http://www.w3.org/2001/XMLSchema" \n               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" \n               xmlns="http://www.imsglobal.org/xsd/imsmd_rootv1p2p1" \n               elementFormDefault="qualified" \n               version="1.2:1.1 IMS:MD1.2">\n\n      <xsd:import namespace="http://www.w3.org/XML/1998/namespace" schemaLocation="ims_xml.xsd"/> \n\n      \x3c!-- ******************** --\x3e\n      \x3c!-- ** Change History ** --\x3e\n      \x3c!-- ******************** --\x3e\n      <xsd:annotation>\n         <xsd:documentation>2001-04-26 T.D.Wason. IMS meta-data 1.2 XML-Schema.                                  </xsd:documentation>\n         <xsd:documentation>2001-06-07 S.E.Thropp. Changed the multiplicity on all elements to match the         </xsd:documentation>\n         <xsd:documentation>Final 1.2 Binding Specification.                                                     </xsd:documentation>\n         <xsd:documentation>Changed all elements that use the langstringType to a multiplicy of 1 or more        </xsd:documentation>\n         <xsd:documentation>Changed centity in the contribute element to have a multiplicity of 0 or more.       </xsd:documentation>\n         <xsd:documentation>Changed the requirement element to have a multiplicity of 0 or more.                 </xsd:documentation>\n         <xsd:documentation> 2001-07-25 Schawn Thropp.  Updates to bring the XSD up to speed with the W3C        </xsd:documentation>\n         <xsd:documentation> XML Schema Recommendation.  The following changes were made: Change the             </xsd:documentation>\n         <xsd:documentation> namespace to reference the 5/2/2001 W3C XML Schema Recommendation,the base          </xsd:documentation>\n         <xsd:documentation> type for the durtimeType, simpleType, was changed from timeDuration to duration.    </xsd:documentation>              \n         <xsd:documentation> Any attribute declarations that have use="default" had to change to use="optional"  </xsd:documentation>\n         <xsd:documentation> - attr.type.  Any attribute declarations that have value ="somevalue" had to change </xsd:documentation>\n         <xsd:documentation> to default = "somevalue" - attr.type (URI)                                          </xsd:documentation>\n         <xsd:documentation> 2001-09-04 Schawn Thropp                                                            </xsd:documentation>\n         <xsd:documentation> Changed the targetNamespace and namespace of schema to reflect version change       </xsd:documentation>\n      </xsd:annotation>\n\n      \x3c!-- *************************** --\x3e\n      \x3c!-- ** Attribute Declaration ** --\x3e\n      \x3c!-- *************************** --\x3e\n\n      <xsd:attributeGroup name="attr.type">\n         <xsd:attribute name="type" use="optional" default="URI">\n            <xsd:simpleType>\n               <xsd:restriction base="xsd:string">\n                  <xsd:enumeration value="URI"/>\n                  <xsd:enumeration value="TEXT"/>\n               </xsd:restriction>\n            </xsd:simpleType>\n         </xsd:attribute>\n      </xsd:attributeGroup>\n\n      <xsd:group name="grp.any">\n         <xsd:annotation>\n            <xsd:documentation>Any namespaced element from any namespace may be used for an &quot;any&quot; element.  The namespace for the imported element must be defined in the instance, and the schema must be imported.  </xsd:documentation>\n         </xsd:annotation>\n         <xsd:sequence>\n            <xsd:any namespace="##any" processContents="strict" minOccurs="0" maxOccurs="unbounded"/>\n         </xsd:sequence>\n      </xsd:group>\n\n      \x3c!-- ************************* --\x3e\n      \x3c!-- ** Element Declaration ** --\x3e\n      \x3c!-- ************************* --\x3e\n\n      <xsd:element name="aggregationlevel" type="aggregationlevelType"/>\n      <xsd:element name="annotation" type="annotationType"/>\n      <xsd:element name="catalogentry" type="catalogentryType"/>\n      <xsd:element name="catalog" type="catalogType"/>\n      <xsd:element name="centity" type="centityType"/>\n      <xsd:element name="classification" type="classificationType"/>\n      <xsd:element name="context" type="contextType"/>\n      <xsd:element name="contribute" type="contributeType"/>\n      <xsd:element name="copyrightandotherrestrictions" type="copyrightandotherrestrictionsType"/>\n      <xsd:element name="cost" type="costType"/>\n      <xsd:element name="coverage" type="coverageType"/>\n      <xsd:element name="date" type="dateType"/>\n      <xsd:element name="datetime" type="datetimeType"/>\n      <xsd:element name="description" type="descriptionType"/>\n      <xsd:element name="difficulty" type="difficultyType"/>\n      <xsd:element name="educational" type="educationalType"/>\n      <xsd:element name="entry" type="entryType"/>\n      <xsd:element name="format" type="formatType"/>\n      <xsd:element name="general" type="generalType"/>\n      <xsd:element name="identifier" type="xsd:string"/>\n      <xsd:element name="intendedenduserrole" type="intendedenduserroleType"/>\n      <xsd:element name="interactivitylevel" type="interactivitylevelType"/>\n      <xsd:element name="interactivitytype" type="interactivitytypeType"/>\n      <xsd:element name="keyword" type="keywordType"/>\n      <xsd:element name="kind" type="kindType"/>\n      <xsd:element name="langstring" type="langstringType"/>\n      <xsd:element name="language" type="xsd:string"/>\n      <xsd:element name="learningresourcetype" type="learningresourcetypeType"/>\n      <xsd:element name="lifecycle" type="lifecycleType"/>\n      <xsd:element name="location" type="locationType"/>\n      <xsd:element name="lom" type="lomType"/>\n      <xsd:element name="maximumversion" type="minimumversionType"/>\n      <xsd:element name="metadatascheme" type="metadataschemeType"/>\n      <xsd:element name="metametadata" type="metametadataType"/>\n      <xsd:element name="minimumversion" type="maximumversionType"/>\n      <xsd:element name="name" type="nameType"/>\n      <xsd:element name="purpose" type="purposeType"/>\n      <xsd:element name="relation" type="relationType"/>\n      <xsd:element name="requirement" type="requirementType"/>\n      <xsd:element name="resource" type="resourceType"/>\n      <xsd:element name="rights" type="rightsType"/>\n      <xsd:element name="role" type="roleType"/>\n      <xsd:element name="semanticdensity" type="semanticdensityType"/>\n      <xsd:element name="size" type="sizeType"/>\n      <xsd:element name="source" type="sourceType"/>\n      <xsd:element name="status" type="statusType"/>\n      <xsd:element name="structure" type="structureType"/>\n      <xsd:element name="taxon" type="taxonType"/>\n      <xsd:element name="taxonpath" type="taxonpathType"/>\n      <xsd:element name="technical" type="technicalType"/>\n      <xsd:element name="title" type="titleType"/>\n      <xsd:element name="type" type="typeType"/>\n      <xsd:element name="typicalagerange" type="typicalagerangeType"/>\n      <xsd:element name="typicallearningtime" type="typicallearningtimeType"/>\n      <xsd:element name="value" type="valueType"/>\n      <xsd:element name="person" type="personType"/>\n      <xsd:element name="vcard" type="xsd:string"/>\n      <xsd:element name="version" type="versionType"/>\n      <xsd:element name="installationremarks" type="installationremarksType"/>\n      <xsd:element name="otherplatformrequirements" type="otherplatformrequirementsType"/>\n      <xsd:element name="duration" type="durationType"/>\n      <xsd:element name="id" type="idType"/>\n\n      \x3c!-- ******************* --\x3e\n      \x3c!-- ** Complex Types ** --\x3e\n      \x3c!-- ******************* --\x3e\n\n      <xsd:complexType name="aggregationlevelType">\n         <xsd:sequence>\n            <xsd:element ref="source"/>\n            <xsd:element ref="value"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="annotationType" mixed="true">\n         <xsd:sequence>\n            <xsd:element ref="person" minOccurs="0"/>\n            <xsd:element ref="date" minOccurs="0"/>\n            <xsd:element ref="description" minOccurs="0"/>\n            <xsd:group ref="grp.any"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="catalogentryType" mixed="true">\n         <xsd:sequence>\n            <xsd:element ref="catalog"/>\n            <xsd:element ref="entry"/>\n            <xsd:group ref="grp.any"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="centityType">\n         <xsd:sequence>\n            <xsd:element ref="vcard"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="classificationType" mixed="true">\n         <xsd:sequence>\n            <xsd:element ref="purpose" minOccurs="0"/>\n            <xsd:element ref="taxonpath" minOccurs="0" maxOccurs="unbounded"/>\n            <xsd:element ref="description" minOccurs="0"/>\n            <xsd:element ref="keyword" minOccurs="0" maxOccurs="unbounded"/>\n            <xsd:group ref="grp.any"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="contextType">\n         <xsd:sequence>\n            <xsd:element ref="source"/>\n            <xsd:element ref="value"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="contributeType" mixed="true">\n         <xsd:sequence>\n            <xsd:element ref="role"/>\n            <xsd:element ref="centity" minOccurs="0" maxOccurs="unbounded"/>\n            <xsd:element ref="date" minOccurs="0"/>\n            <xsd:group ref="grp.any"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="copyrightandotherrestrictionsType">\n         <xsd:sequence>\n            <xsd:element ref="source"/>\n            <xsd:element ref="value"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="costType">\n         <xsd:sequence>\n            <xsd:element ref="source"/>\n            <xsd:element ref="value"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="coverageType">\n         <xsd:sequence>\n            <xsd:element ref="langstring" minOccurs="1" maxOccurs="unbounded"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="dateType">\n         <xsd:sequence>\n            <xsd:element ref="datetime" minOccurs="0"/>\n            <xsd:element ref="description" minOccurs="0"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="descriptionType">\n         <xsd:sequence>\n            <xsd:element ref="langstring" minOccurs="1" maxOccurs="unbounded"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="difficultyType">\n         <xsd:sequence>\n            <xsd:element ref="source"/>\n            <xsd:element ref="value"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="durationType">\n         <xsd:sequence>\n            <xsd:element ref="datetime" minOccurs="0"/>\n            <xsd:element ref="description" minOccurs="0"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="educationalType" mixed="true">\n         <xsd:sequence>\n            <xsd:element ref="interactivitytype" minOccurs="0"/>\n            <xsd:element ref="learningresourcetype" minOccurs="0" maxOccurs="unbounded"/>\n            <xsd:element ref="interactivitylevel" minOccurs="0"/>\n            <xsd:element ref="semanticdensity" minOccurs="0"/>\n            <xsd:element ref="intendedenduserrole" minOccurs="0" maxOccurs="unbounded"/>\n            <xsd:element ref="context" minOccurs="0" maxOccurs="unbounded"/>\n            <xsd:element ref="typicalagerange" minOccurs="0" maxOccurs="unbounded"/>\n            <xsd:element ref="difficulty" minOccurs="0"/>\n            <xsd:element ref="typicallearningtime" minOccurs="0"/>\n            <xsd:element ref="description" minOccurs="0"/>\n            <xsd:element ref="language" minOccurs="0" maxOccurs="unbounded"/>\n            <xsd:group ref="grp.any"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="entryType">\n         <xsd:sequence>\n            <xsd:element ref="langstring" minOccurs="1" maxOccurs="unbounded"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="generalType" mixed="true">\n         <xsd:sequence>\n            <xsd:element ref="identifier" minOccurs="0"/>\n            <xsd:element ref="title" minOccurs="0"/>\n            <xsd:element ref="catalogentry" minOccurs="0" maxOccurs="unbounded"/>\n            <xsd:element ref="language" minOccurs="0" maxOccurs="unbounded"/>\n            <xsd:element ref="description" minOccurs="0" maxOccurs="unbounded"/>\n            <xsd:element ref="keyword" minOccurs="0" maxOccurs="unbounded"/>\n            <xsd:element ref="coverage" minOccurs="0" maxOccurs="unbounded"/>\n            <xsd:element ref="structure" minOccurs="0"/>\n            <xsd:element ref="aggregationlevel" minOccurs="0"/>\n            <xsd:group ref="grp.any"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="installationremarksType">\n         <xsd:sequence>\n            <xsd:element ref="langstring" minOccurs="1" maxOccurs="unbounded"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="intendedenduserroleType">\n         <xsd:sequence>\n            <xsd:element ref="source"/>\n            <xsd:element ref="value"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="interactivitylevelType">\n         <xsd:sequence>\n            <xsd:element ref="source"/>\n            <xsd:element ref="value"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="interactivitytypeType">\n         <xsd:sequence>\n            <xsd:element ref="source"/>\n            <xsd:element ref="value"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="keywordType">\n         <xsd:sequence>\n            <xsd:element ref="langstring" minOccurs="1" maxOccurs="unbounded"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="kindType">\n         <xsd:sequence>\n            <xsd:element ref="source"/>\n            <xsd:element ref="value"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="langstringType">\n         <xsd:simpleContent>\n            <xsd:extension base="xsd:string">\n               <xsd:attribute ref="xml:lang"/>\n            </xsd:extension>\n         </xsd:simpleContent>\n      </xsd:complexType>\n      \n      <xsd:complexType name="learningresourcetypeType">\n         <xsd:sequence>\n            <xsd:element ref="source"/>\n            <xsd:element ref="value"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="lifecycleType" mixed="true">\n         <xsd:sequence>\n            <xsd:element ref="version" minOccurs="0"/>\n            <xsd:element ref="status" minOccurs="0"/>\n            <xsd:element ref="contribute" minOccurs="0" maxOccurs="unbounded"/>\n            <xsd:group ref="grp.any"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="locationType">\n         <xsd:simpleContent>\n            <xsd:extension base="xsd:string">\n               <xsd:attributeGroup ref="attr.type"/>\n            </xsd:extension>\n         </xsd:simpleContent>\n      </xsd:complexType>\n      \n      <xsd:complexType name="lomType">\n         <xsd:sequence>\n            <xsd:element ref="general" minOccurs="0"/>\n            <xsd:element ref="lifecycle" minOccurs="0"/>\n            <xsd:element ref="metametadata" minOccurs="0"/>\n            <xsd:element ref="technical" minOccurs="0"/>\n            <xsd:element ref="educational" minOccurs="0"/>\n            <xsd:element ref="rights" minOccurs="0"/>\n            <xsd:element ref="relation" minOccurs="0" maxOccurs="unbounded"/>\n            <xsd:element ref="annotation" minOccurs="0" maxOccurs="unbounded"/>\n            <xsd:element ref="classification" minOccurs="0" maxOccurs="unbounded"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="metametadataType" mixed="true">\n         <xsd:sequence>\n            <xsd:element ref="identifier" minOccurs="0"/>\n            <xsd:element ref="catalogentry" minOccurs="0" maxOccurs="unbounded"/>\n            <xsd:element ref="contribute" minOccurs="0" maxOccurs="unbounded"/>\n            <xsd:element ref="metadatascheme" minOccurs="0" maxOccurs="unbounded"/>\n            <xsd:element ref="language" minOccurs="0"/>\n            <xsd:group ref="grp.any"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="nameType">\n         <xsd:sequence>\n            <xsd:element ref="source"/>\n            <xsd:element ref="value"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="otherplatformrequirementsType">\n         <xsd:sequence>\n            <xsd:element ref="langstring" minOccurs="1" maxOccurs="unbounded"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="personType">\n         <xsd:sequence>\n            <xsd:element ref="vcard"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="purposeType">\n         <xsd:sequence>\n            <xsd:element ref="source"/>\n            <xsd:element ref="value"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="relationType" mixed="true">\n         <xsd:sequence>\n            <xsd:element ref="kind" minOccurs="0"/>\n            <xsd:element ref="resource" minOccurs="0"/>\n            <xsd:group ref="grp.any"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="requirementType" mixed="true">\n         <xsd:sequence>\n            <xsd:element ref="type" minOccurs="0"/>\n            <xsd:element ref="name" minOccurs="0"/>\n            <xsd:element ref="minimumversion" minOccurs="0"/>\n            <xsd:element ref="maximumversion" minOccurs="0"/>\n            <xsd:group ref="grp.any"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="resourceType" mixed="true">\n         <xsd:sequence>\n            <xsd:element ref="identifier" minOccurs="0"/>\n            <xsd:element ref="description" minOccurs="0"/>\n            <xsd:element ref="catalogentry" minOccurs="0" maxOccurs="unbounded"/>\n            <xsd:group ref="grp.any"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="rightsType" mixed="true">\n         <xsd:sequence>\n            <xsd:element ref="cost" minOccurs="0"/>\n            <xsd:element ref="copyrightandotherrestrictions" minOccurs="0"/>\n            <xsd:element ref="description" minOccurs="0"/>\n            <xsd:group ref="grp.any"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="roleType">\n         <xsd:sequence>\n            <xsd:element ref="source"/>\n            <xsd:element ref="value"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="semanticdensityType">\n         <xsd:sequence>\n            <xsd:element ref="source"/>\n            <xsd:element ref="value"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="sourceType">\n         <xsd:sequence>\n            <xsd:element ref="langstring"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="statusType">\n         <xsd:sequence>\n            <xsd:element ref="source"/>\n            <xsd:element ref="value"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="stringType">\n         <xsd:simpleContent>\n            <xsd:extension base="xsd:string">\n               <xsd:attribute ref="xml:lang"/>\n            </xsd:extension>\n         </xsd:simpleContent>\n      </xsd:complexType>\n      \n      <xsd:complexType name="structureType">\n         <xsd:sequence>\n            <xsd:element ref="source"/>\n            <xsd:element ref="value"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="taxonpathType">\n         <xsd:sequence>\n            <xsd:element ref="source" minOccurs="0"/>\n            <xsd:element ref="taxon" minOccurs="0" maxOccurs="1"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="taxonType">\n         <xsd:sequence>\n            <xsd:element ref="id" minOccurs="0"/>\n            <xsd:element ref="entry" minOccurs="0"/>\n            <xsd:element ref="taxon" minOccurs="0" maxOccurs="1"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="technicalType" mixed="true">\n         <xsd:sequence>\n            <xsd:element ref="format" minOccurs="0" maxOccurs="unbounded"/>\n            <xsd:element ref="size" minOccurs="0"/>\n            <xsd:element ref="location" minOccurs="0" maxOccurs="unbounded"/>\n            <xsd:element ref="requirement" minOccurs="0" maxOccurs="unbounded"/>\n            <xsd:element ref="installationremarks" minOccurs="0"/>\n            <xsd:element ref="otherplatformrequirements" minOccurs="0"/>\n            <xsd:element ref="duration" minOccurs="0"/>\n            <xsd:group ref="grp.any"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="titleType">\n         <xsd:sequence>\n            <xsd:element ref="langstring" minOccurs="1" maxOccurs="unbounded"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="typeType">\n         <xsd:sequence>\n            <xsd:element ref="source"/>\n            <xsd:element ref="value"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="typicalagerangeType">\n         <xsd:sequence>\n            <xsd:element ref="langstring" minOccurs="1" maxOccurs="unbounded"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="typicallearningtimeType">\n         <xsd:sequence>\n            <xsd:element ref="datetime" minOccurs="0"/>\n            <xsd:element ref="description" minOccurs="0"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="valueType">\n         <xsd:sequence>\n            <xsd:element ref="langstring"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      <xsd:complexType name="versionType">\n         <xsd:sequence>\n            <xsd:element ref="langstring" minOccurs="1" maxOccurs="unbounded"/>\n         </xsd:sequence>\n      </xsd:complexType>\n      \n      \x3c!-- ****************** --\x3e\n      \x3c!-- ** Simple Types ** --\x3e\n      \x3c!-- ****************** --\x3e\n      \n      <xsd:simpleType name="formatType">\n         <xsd:restriction base="xsd:string"/>\n      </xsd:simpleType>\n      \n      <xsd:simpleType name="sizeType">\n         <xsd:restriction base="xsd:int"/>\n      </xsd:simpleType>\n      \n      <xsd:simpleType name="datetimeType">\n         <xsd:restriction base="xsd:string"/>\n      </xsd:simpleType>\n      \n      <xsd:simpleType name="idType">\n         <xsd:restriction base="xsd:string"/>\n      </xsd:simpleType>\n      \n      <xsd:simpleType name="metadataschemeType">\n         <xsd:restriction base="xsd:string"/>\n      </xsd:simpleType>\n      \n      <xsd:simpleType name="catalogType">\n         <xsd:restriction base="xsd:string"/>\n      </xsd:simpleType>\n      \n      <xsd:simpleType name="minimumversionType">\n         <xsd:restriction base="xsd:string"/>\n      </xsd:simpleType>\n      \n      <xsd:simpleType name="maximumversionType">\n         <xsd:restriction base="xsd:string"/>\n      </xsd:simpleType>\n\n   </xsd:schema>\n   `;

  /* ======================================== */

  const notInputMessage = (() => {
    console.log(`Esta flag espera 1 argumento não vazio`);
    process.exit();
  })

  const findKey = (keyToFind) => Object.keys(options).filter(key => key.split(',').includes(keyToFind))

  const processUserInputArgs = (function () {
    var keyFound = false;

    if (userInputArgs.length > 2) {
      do {
        let argToken = userInputArgs.pop();
        let splitTokenArr = argToken.split("=");
        let flag = splitTokenArr[0];

        if (flag === 'build') return true;

        let flagInput = false;

        if (splitTokenArr.length > 1) {
          flagInput = splitTokenArr[1];
        }

        keyFound = findKey(flag);
        if (!keyFound) {
          console.log('Flag não encontrada.');
          return false;
        }
        options[keyFound](flagInput);
      } while (userInputArgs.length > 2);
    }
    return true;
  });

  const setFileNameRegex = (function () {
    htmlFileNameRegex = new RegExp(htmlFilenamePattern, "i");
    return !!htmlFileNameRegex;
  });

  const matchPattern = (regex, name) => regex.exec(name) !== null;

  /* *** */

  const setScoRefObj = (function () {
    console.log('Procurando arquivos...');
    let found = false;
    var folderList = [];
    folderList.push(root)

    folderList.map(folder => {
      console.log(`Resultado utilizando o regex: \x1b[33m${htmlFileNameRegex}\x1b[0m`);
      fs.readdirSync(folder).map((fileName) => {
		console.log('fileName',fileName)
        let result = htmlFileNameRegex.exec(fileName);
        if (!!!result || !fileName.includes('.html')) return false;

        var scoTitle = dateNow;
        const data = fs.readFileSync(`${folder}${fileName}`, { encoding: 'utf8', flag: 'r' });
        let titleFoundOnData = tagAttrRegex.exec(data);

        scoTitle = titleFoundOnData ? titleFoundOnData[1] : fileName + ' - ' + dateNow;

        scoRefObj[`${folder}/${fileName}`] = {
          resIdentifier: (() => resIdentifier())(),
          scoTitle: scoTitle,
          folder: folder,
        };
        process.stdout.write(`\x1b[33m${result?.input}, \x1b[0m`);
        found = true;
      });
    })
    console.log();
    if (!found) {
      console.log('Nenhuma arquivo html com o padrão especificado foi encontrado.');
    }
    return found
  });

  function generatorKey(e) {
    let n = "";
    const t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
      s = t.length;
    for (let a = 0; a < e; a++) n += t.charAt(Math.floor(Math.random() * s));
    return n.toUpperCase()
  }

  function getfolderList() {
    return Object.values(scoRefObj).map(value => value.folder)
  }

  const fromSameRoot = (key, folder) => key.split('//')[0] + '/' !== folder;

  const mountPrerequisite = lastItemIdentifier => `\n            <adlcp:prerequisites type="aicc_script">${lastItemIdentifier}</adlcp:prerequisites>`;

  function mountItems(folder) {
    let items = '';
    let count = 0;
    let lastItemIdentifier = '';
    let preRequisiteString = '';
    for (const [key, value] of Object.entries(scoRefObj)) {
      if (fromSameRoot(key, folder)) continue;
      let itemIdent = itemIdentifier();
      count++;
      if (havePrerequisites && count > 1) preRequisiteString = mountPrerequisite(lastItemIdentifier);
      items += `    <item identifier="${itemIdent}" identifierref="${value.resIdentifier}" isvisible="true">\n      <title>${value.scoTitle}</title>${preRequisiteString}\n    </item>\n`
      lastItemIdentifier = itemIdent;
    }
    return items;
  }

  function mountAssets(rootFolder) {

    let assetTypes = {
      fonts: ['woff','fonts'],
      scripts: ['js', 'es','scripts'],
      styles: ['css','styles'],
    }

    let assetGroup = '';
    Object.keys(assetTypes).map(assetType => {
      let assetTypeStringFiles = '';
      let foundFiles = false;
      assetTypes[assetType].map(assetTypeFolder => {
        let isFolderOfTypeExists = fs.existsSync(`${rootFolder}assets/${assetTypeFolder}`); 
        if (isFolderOfTypeExists) {
          fs.readdirSync(`${rootFolder}assets/${assetTypeFolder}`).map(file => {
            foundFiles = !!file;
            assetTypeStringFiles += `      <file href="assets/${assetTypeFolder}/${file}" />\n`;
          })
        }
      })
      foundFiles ? assetGroup += `    <resource identifier="${assetType}" type="webcontent" adlcp:scormtype="asset">\n${assetTypeStringFiles}    </resource>\n` : '';
    })

    return assetGroup;
  }

  function mountScos(folder) {
    let e = '';
    for (const [key, value] of Object.entries(scoRefObj)) {
      if (fromSameRoot(key, folder)) continue;
      e += `    <resource identifier="${value.resIdentifier}" href="${key.split('//')[1]}" type="webcontent" adlcp:scormtype="sco">\n      <file href="${key.split('//')[1]}" />\n    </resource>\n`
    }
    return e;
  }

  function createZipPackage() {
    archiveFolder(`${root}`, `./${(new Date()).toISOString().split('T')[0]}-course.zip`, function(err) {
      if(err) console.log('Zip process error: ', err);
    })
  }

  function init() {
    return processUserInputArgs() && setFileNameRegex() && setScoRefObj();
  }

  if (init()) {
    let folderList = [root];

    folderList.map(folder => {
      let xmlHeader = `<?xml version="1.0" encoding="${xmlEnconding}"?>\n   \x3c!--This is a SCORM 1.2 Content Package document--\x3e`;
      let manifestHeader = `<manifest xmlns="http://www.imsproject.org/xsd/imscp_rootv1p1p2"\n  xmlns:imsmd="http://www.imsglobal.org/xsd/imsmd_rootv1p2p1"\n  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n  xmlns:adlcp="http://www.adlnet.org/xsd/adlcp_rootv1p2"\n  identifier="MANIFEST-${generatorKey(32)}"\n  xsi:schemaLocation="http://www.imsproject.org/xsd/imscp_rootv1p1p2 imscp_rootv1p1p2.xsd http://www.imsglobal.org/xsd/imsmd_rootv1p2p1 imsmd_rootv1p2p1.xsd http://www.adlnet.org/xsd/adlcp_rootv1p2 adlcp_rootv1p2.xsd">`;
      let metadata = `  <metadata>\n    <schema>ADL SCORM</schema>\n    <schemaversion>1.2</schemaversion>\n    <adlcp:location />\n  </metadata>`
      let organizations = `  <organizations default="${orgRef}">\n    <organization identifier="${orgRef}" structure="hierarchical">\n    <title>${organizationTitle}</title>\n${mountItems(folder)}    </organization>\n  </organizations>`;
      let resources = `  <resources>\n${mountAssets(folder)}\n${mountScos(folder)}  </resources>\n</manifest>`;

      let manifestBody = `${xmlHeader}\n${manifestHeader}\n${metadata}\n${organizations}\n${resources}`

      fs.writeFileSync(`${folder}adlcp_rootv1p2.xsd`, e, {encoding: fileEncoding});
      fs.writeFileSync(`${folder}ims_xml.xsd`, n, {encoding: fileEncoding});
      fs.writeFileSync(`${folder}imscp_rootv1p1p2.xsd`, t, {encoding: fileEncoding});
      fs.writeFileSync(`${folder}imsmd_rootv1p2p1.xsd`, s, {encoding: fileEncoding});
      fs.writeFileSync(`${folder}imsmanifest.xml`, manifestBody, {encoding: fileEncoding});

    })
    createZipPackage();
    console.log("Processo finalizado!")
  } else {
    console.log('Processo finalizado. Nada foi feito.')
  }
}
